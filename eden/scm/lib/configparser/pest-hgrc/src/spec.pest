// "comment" and "whitespace" have special meaning in pest. They cause more
// trouble than benefit here. Therfore, avoid them.
// See https://pest-parser.github.io/book/grammars/syntax.html
//
// Names are used in error messages. Certain rules are used to improved UX.
// For example,
//
//    equal_sign = { space* ~ "=" ~ space* }
//    config_item = { name ~ equal_sign ~ value }
//
// is more friendly than:
//
//    config_item = { name ~ space* ~ "=" ~ space* ~ value }
//
// because the former shows "expect space", while the latter shows
// "expect equal_sign", for the following illegal content:
//
//    [section]
//    lack-of-equal-sign
//                      ^ error shows here
//
// Same applies to "directive" and "bracket"s.


new_line = { "\n" | "\r\n" }
space = { " " | "\t" }
comment_start = { ("#" | ";") }

line = @{ (!new_line ~ ANY)* }

value = ${ line ~ (new_line ~ space+ ~ line)* }
equal_sign = @{ "=" ~ space* }

// Excluding special prefixes explicitly from config_name affects error
// messages. For example:
//
//    []
//     ^ expect section_name (with "[" excluded)
//      ^ except equal_sign (without "[" excluded)
//
//    %unknown
//     ^ expect unset or include (with "%" excluded)
//            ^ expect equal_sign (without "%" excluded)
//
// The "expect equal_sign" version is less friendly.
config_name = @{ !("[" | "=" | "%" | space | comment_start | new_line) ~ ANY ~ (!("=" | new_line) ~ ANY)* }
config_item = ${ config_name ~ equal_sign ~ value }

left_bracket = @{ "[" }
right_bracket = @{ "]" }

section_name = @{ (!("]" | new_line) ~ ANY)+ }
section = ${ left_bracket ~ section_name ~ right_bracket ~ space* }

comment_line = @{ comment_start ~ line }
blank_line = @{ space* }

directive = ${ "%" ~ (include | unset) }
include = ${ "include" ~ space+ ~ line }
unset = ${ "unset" ~ space+ ~ config_name ~ space* }

compound = _{ (config_item | section | comment_line | directive | blank_line ) }
file = _{ SOI ~ compound ~ (new_line ~ compound)* ~ EOI }
